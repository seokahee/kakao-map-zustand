import { LatLngType, MapType, StorePositionsType } from "../types/type";

// 마커 클러스터 styles
export const clustererStyles = [
  {
    minWidth: "20px",
    height: "30px",
    padding: "0px 5px",
    color: "rgb(255, 255, 255)",
    fontSize: "15px",
    lineHeight: "30px",
    textAlign: "center",
    borderRadius: "30px",
    backgroundColor: "rgb(50, 108, 249)",
    whiteSpace: "nowrap",
    position: "relative",
  },
];

// 현재 위치 가져오기
// setMapState 타입 다시 확인
export const getCurrentAddress = (
  setMapState: (arg: MapType | any) => void,
  setMyMarkerState: (arg: LatLngType) => void,
  getAddressHandle: (lat: number, lng: number) => void
) => {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const newCenter: LatLngType = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };

        setMapState((prev: MapType | any) => ({
          ...prev,
          center: newCenter,
        }));

        setMyMarkerState(newCenter);
        getAddressHandle(newCenter.lat, newCenter.lng);
      },
      (err) => {
        setMapState({
          center: { lat: 0, lng: 0 },
          address: "",
          errMsg: err.message,
        });
      }
    );
  } else {
    setMapState({
      center: { lat: 0, lng: 0 },
      address: "",
      errMsg: "현재 위치를 찾을 수 없습니다.",
    });
  }
};

// 중심좌표 구하기
export const centerChangeHandler = (
  map: kakao.maps.Map,
  setMyMarkerState: (arg: LatLngType) => void,
  setMapState: (arg: MapType | any) => void,
  getAddressHandle: (lat: number, lng: number) => void
) => {
  const newCenter = map.getCenter();
  const newPosition = {
    lat: newCenter.getLat(),
    lng: newCenter.getLng(),
  };

  setMyMarkerState(newPosition);
  setMapState((prev: MapType | any) => ({
    ...prev,
    center: newPosition,
  }));

  // 주소 검색 디바운스 처리
  getAddressHandle(newPosition.lat, newPosition.lng);
};

// 지도영역에 포함된 마커만 출력
export const onBoundsChangeHandler = (
  map: any,
  visibleMarkers: StorePositionsType[],
  setVisibleMarkers: (arg: StorePositionsType[]) => void
) => {
  const bounds = map.getBounds(); // 지도 영역값 가져오기

  const filteredMarkers = visibleMarkers.filter(
    (marker: StorePositionsType) => {
      const markerLatLng = new kakao.maps.LatLng(
        Number(marker.lat),
        Number(marker.lng)
      );
      return bounds.contain(markerLatLng); // 지도 경계 내 포함 여부 확인
    }
  );

  setVisibleMarkers(filteredMarkers);
};

// 머신 마커 이미지 설정
export const getMarkerImage = (machineType: string) => {
  switch (machineType) {
    case "아이머신":
      return {
        src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGmkjuCUStRkZCr_t6i4sm1BVpvUfT8dPhMQ&s",
        size: { width: 32, height: 32 },
        options: { offset: { x: 16, y: 32 } },
      };
    case "케이머신":
      return {
        src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSC2ipsBLzm7rx3hFc3KHfZPw0AZFFpMH_Y7Q&s",
        size: { width: 32, height: 32 },
        options: { offset: { x: 16, y: 32 } },
      };
    case "멀티머신":
      return {
        src: "https://play-lh.googleusercontent.com/q8Bo5joSXW_ahRPpfvzlBGyRwRfDEjBEevOU496rLt54upZ_dbs9zTo9wUCMkmoBYx4=w240-h480-rw",
        size: { width: 32, height: 32 },
        options: { offset: { x: 16, y: 32 } },
      };
    case "조이머신":
      return {
        src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxUxPdchLCrOSC1JGr73rAwrpxOPsdOQxwcQ&s",
        size: { width: 32, height: 32 },
        options: { offset: { x: 16, y: 32 } },
      };
    default:
      return {
        src: "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png", // 기본 이미지
        size: { width: 32, height: 32 },
        options: { offset: { x: 16, y: 32 } },
      };
  }
};
