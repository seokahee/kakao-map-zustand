import { useEffect, useMemo, useState } from "react";
import { DragDropContext, Droppable } from "react-beautiful-dnd";
import { Map, MapMarker, MarkerClusterer, useMap } from "react-kakao-maps-sdk";
import { debounce } from "../util/useDebounce";
import {
  centerChangeHandler,
  clustererStyles,
  getCurrentAddress,
  getMarkerImage,
  onBoundsChangeHandler,
} from "../common/util";
import DragMenu from "../DragMenu";
import { useMapStore } from "../store";
import { storePositions } from "../storeData";
import { StorePositionsType } from "../types/type";

function MapMultiMarker() {
  const {
    myMarkerState,
    setMyMarkerState,
    isOpenStates,
    setIsOpenStates,
    visibleMarkers,
    setVisibleMarkers,
    saveState,
    isSaved,
    setSaveState,
    setIsSaved,
    getCurrentAddress,
    getAddressHandle,
    centerChangeHandler,
    onBoundsChangeHandler,
    getMarkerImage,
    clustererStyles,
  } = useMap();

  // const [mapState, setMapState] = useState({
  //   center: {
  //     lat: 33.450701,
  //     lng: 126.570667,
  //   },
  //   address: "",
  //   errMsg: "",
  // });

  // const [myMarkerState, setMyMarkerState] = useState(mapState.center); // 내 위치
  // const [isOpenStates, setIsOpenStates] = useState<Record<string, boolean>>(
  //   Object.fromEntries(storePositions.map((item) => [item.id, false]))
  // ); // 마커 인포윈도우
  // const [visibleMarkers, setVisibleMarkers] = useState<StorePositionsType[]>(
  //   []
  // ); // 지도 영역에 포함되는 매장

  // const { saveState, isSaved, setSaveState, setIsSaved } = useMapStore();

  // // 컴포넌트 마운트 시 초기화
  // useEffect(() => {
  //   // if (window.kakao && window.kakao.maps) {
  //   if (isSaved && saveState.center) {
  //     setMyMarkerState(saveState.center);
  //     setMapState((prev) => ({
  //       ...prev,
  //       center: saveState.center,
  //     }));
  //     getAddressHandle(saveState.center.lat, saveState.center.lng);
  //   } else {
  //     getCurrentAddress(setMapState, setMyMarkerState, getAddressHandle);
  //   }
  //   // }
  // }, []);

  // // 좌표를 주소로 변환
  // const getAddressHandle = useMemo(
  //   () =>
  //     debounce((lat: number, lng: number) => {
  //       const geocoder = new window.kakao.maps.services.Geocoder();
  //       geocoder.coord2Address(lng, lat, (result: any, status: string) => {
  //         if (status === kakao.maps.services.Status.OK) {
  //           const address = result[0].address.address_name;
  //           setMapState((prev) => ({
  //             ...prev,
  //             address,
  //           }));

  //           const region = address.split(" ")[2];
  //           const markers = storePositions.filter((item) => {
  //             return item.address.includes(region);
  //           });
  //           setVisibleMarkers(markers);
  //         } else {
  //           setMapState((prev) => ({
  //             ...prev,
  //             address: "주소를 찾을 수 없습니다.",
  //           }));
  //         }
  //       });
  //     }, 300),
  //   [isSaved]
  // );

  const onDragEnd = () => {
    console.log("드롭!!!!!!!!!!!!!!!!!!!!!!!!!");
  };
  return (
    <DragDropContext onDragEnd={onDragEnd}>
      <div className="map-wrap">
        <Map
          center={isSaved ? saveState.center : mapState.center}
          style={{
            // maxWidth: "800px",
            width: "100%",
            height: "80vh",
          }}
          level={7}
          onDragEnd={(map) =>
            centerChangeHandler(
              map,
              setMyMarkerState,
              setMapState,
              getAddressHandle
            )
          }
          onBoundsChanged={(map) =>
            onBoundsChangeHandler(map, visibleMarkers, setVisibleMarkers)
          }
        >
          <MarkerClusterer
            averageCenter={true}
            minLevel={3}
            styles={clustererStyles}
          >
            {visibleMarkers.map((item) => {
              const lat = Number(item.lat);
              const lng = Number(item.lng);
              const markerImage = getMarkerImage(item.machine); // 머신 종류에 따른 이미지 가져오기

              return (
                <div>
                  <MapMarker
                    key={item.id}
                    position={{ lat, lng }}
                    image={markerImage}
                    clickable={true}
                    onMouseOver={() =>
                      setIsOpenStates((prev) => ({
                        ...prev,
                        [item.id]: true,
                      }))
                    }
                    onMouseOut={() =>
                      setIsOpenStates((prev) => ({
                        ...prev,
                        [item.id]: false,
                      }))
                    }
                  >
                    {isOpenStates[item.id] && (
                      <div style={{ minWidth: "250px", width: "100%" }}>
                        <div
                          style={{
                            textAlign: "center",
                            padding: "5px",
                            color: "#000",
                          }}
                        >
                          {item.storeName}
                        </div>
                      </div>
                    )}
                  </MapMarker>
                </div>
              );
            })}
          </MarkerClusterer>
        </Map>

        <div className="pointer-btn-wrap">
          <button
            className="pointer-btn"
            onClick={() => {
              setSaveState(myMarkerState);
              setIsSaved(true);
              getAddressHandle(myMarkerState.lat, myMarkerState.lng);
            }}
          >
            위치 저장
          </button>
          <button
            className="pointer-btn"
            onClick={() => {
              setIsSaved(false);
              getCurrentAddress(
                setMapState,
                setMyMarkerState,
                getAddressHandle
              );
            }}
          >
            현재 위치
          </button>
        </div>

        <div className="menu-btn">드래그 메뉴</div>

        <Droppable droppableId="droppable">
          {(provided) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              className="menu-wrap"
            >
              <DragMenu />

              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </div>
    </DragDropContext>
  );
}

export default MapMultiMarker;