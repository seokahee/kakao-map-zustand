import React, { useState, useRef, useEffect } from "react";
import { useStoreMarkersStore } from "../store";
import ContentDragBtn from "./ContentDragBtn";
import { StorePositionsType } from "../types/type";
import Sortable from "sortablejs";
import { motion, PanInfo, useAnimation } from "framer-motion";

function BottomSheetContents({
  setIsMotion,
}: {
  setIsMotion: (arg: boolean) => void;
}) {
  const { storeMarkers, setStoreMarkers } = useStoreMarkersStore();
  const [draggedItems, setDraggedItems] = useState<Set<string>>(new Set()); // 아이템 드래그 상태
  const [dragStart, setDragStart] = useState(0); // 초기 드래그 X좌표

  const dragX = useRef<HTMLDivElement | null>(null);
  const sortableRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    if (sortableRef.current) {
      const sortable = new Sortable(sortableRef.current, {
        onEnd(e) {
          const newStoreMarkers = [...storeMarkers];
          const movedItem = newStoreMarkers.splice(e.oldIndex as number, 1)[0];
          newStoreMarkers.splice(e.newIndex as number, 0, movedItem);
          setStoreMarkers(newStoreMarkers);
        },
        handle: ".dnd-btn",
        animation: 150,
        ghostClass: "blue-background-class",
      });

      return () => {
        sortable.destroy();
      };
    }
  }, [storeMarkers, setIsMotion, setStoreMarkers]);

  const onPointerDown = () => {
    setIsMotion(false); // 부모 모션 비활성화
  };

  const onDragEnd = (
    e: MouseEvent | TouchEvent | PointerEvent,
    info: PanInfo,
    id: string
  ) => {
    const offset = info.offset;

    // 왼쪽으로 100이상 드래그 시 요소 밀기
    if (offset.x < -100) {
      setDraggedItems((prev) => new Set(prev).add(id)); // 드래그된 항목 추적
    }
    // 오른쪽으로 드래그하면 원상복귀
    if (offset.x > 100) {
      setDraggedItems((prev) => {
        const updatedItems = new Set(prev);
        updatedItems.delete(id); // 드래그 끝나면 해당 아이템 삭제
        return updatedItems;
      });
    }
  };

  // const onDragStart = (e: React.DragEvent<HTMLDivElement>, id: string) => {
  //   dragX.current = e.currentTarget; // dragX에 현재 요소 할당
  //   setDragStart(e.clientX); // 드래그 시작 위치 설정

  //   console.log("드래그");
  // };

  // const onDrag = (e: React.DragEvent<HTMLDivElement>, id: string) => {
  //   if (!dragX.current) return;
  //   console.log("드래그");

  //   if (dragStart) {
  //     dragX.current.classList.remove("drag-left");
  //   }
  // };

  // const onDragEnd = (e: React.DragEvent<HTMLDivElement>, id: string) => {
  //   if (!dragX.current) return;

  //   // 드래그 거리 계산 (드래그 길이 - 드래그 시작지점 = 왼쪽(음수) 오른쪽(양수)가 나옴)
  //   const offsetX = e.clientX - dragStart;

  //   // 왼쪽으로 100이상 드래그 시 요소 밀기
  //   if (offsetX < -50) {
  //     dragX.current.classList.add("drag-left");
  //     setDraggedItems((prev) => new Set(prev).add(id)); // 드래그된 항목 추적
  //   }
  //   // 오른쪽으로 드래그하면 원상복귀
  //   if (offsetX > 100) {
  //     dragX.current.classList.remove("drag-left");

  //     setDraggedItems((prev) => {
  //       const updatedItems = new Set(prev);
  //       updatedItems.delete(id); // 드래그 끝나면 해당 아이템 삭제
  //       return updatedItems;
  //     });
  //   }
  // };

  const handleDelete = (id: string) => {
    console.log(`Deleted: ${id}`);
  };

  return (
    <div className="sheet-content-wrap" ref={sortableRef}>
      {storeMarkers.map((item) => {
        const isDragged = draggedItems.has(item.id); // 드래그된 항목 확인
        return (
          <motion.div
            key={item.id}
            className="sheet-content"
            onPointerDown={onPointerDown}
            // draggable="true"
            // onDragStart={(e) => onDragStart(e, item.id)} // onDragStart에 dragX.current 설정
            // onDrag={(e) => onDrag(e, item.id)}
            // onDragEnd={(e) => onDragEnd(e, item.id)}
            drag={"x"}
            dragConstraints={{ left: -100, right: 0 }}
            onDragEnd={(e, info) => onDragEnd(e, info, item.id)}
            dragMomentum={false}
          >
            <div className="content-item">
              <img
                src="https://i.namu.wiki/i/cRmy09fCmil6W_AKYhSNoAluIvm1gNrmGBpLacGMeef8RW4CXohhn9dC-Q8zP5RjiTvErkfQ1Z3vZUpaiFe1ig.gif"
                alt="Store"
                className="store-img"
              />
              <div className="content-info">
                <div>{item.storeName}</div>
                <div>{item.machine}</div>
                <div>{item.address}</div>
              </div>
            </div>

            <div
              className="dnd-btn"
              draggable="true"
              style={{
                opacity: isDragged ? 0 : 1,
                transform: isDragged ? "translateX(0)" : "translateX(100%)",
                transition: "transform 0.3s ease, opacity 0.3s ease",
                cursor: "grab",
              }}
            >
              <ContentDragBtn />
            </div>

            <div
              className="delete-btn"
              style={{
                opacity: isDragged ? 1 : 0,
                transform: isDragged ? "translateX(0)" : "translateX(100%)",
                transition: "transform 0.3s ease, opacity 0.3s ease",
              }}
              onClick={() => handleDelete(item.id)}
            >
              <img
                src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjzkKApgCqmIe2-XZnAZURKLuDmNVwO7jALA&s"
                alt="Delete"
              />
            </div>
          </motion.div>
        );
      })}
    </div>
  );
}

export default BottomSheetContents;
