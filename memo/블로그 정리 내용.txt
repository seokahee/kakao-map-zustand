1. 지도 중심 좌표를 기준으로 지도 영역에 해당하는 좌표
const centerChangeHandler = (map: any) => {
  const newCenter = map.getCenter(); // 지도 중심 좌표
  const bounds = map.getBounds(); // 지도 경계 좌표

  const centerPosition = {
    lat: newCenter.getLat(),
    lng: newCenter.getLng(),
  };

  const sw = bounds.getSouthWest(); // 지도 남서쪽 좌표
  const ne = bounds.getNorthEast(); // 지도 북동쪽 좌표

  console.log("지도 중심 좌표:", centerPosition);
  console.log("지도 경계 좌표:");
  console.log("남서쪽:", { lat: sw.getLat(), lng: sw.getLng() });
  console.log("북동쪽:", { lat: ne.getLat(), lng: ne.getLng() });

  setMarkerState(centerPosition);
  setMapState((prev) => ({
    ...prev,
    center: centerPosition,
  }));

  // 주소 검색 디바운스 처리
  getAddressHandle(centerPosition.lat, centerPosition.lng);
};


map.getCenter():

현재 지도 중심 좌표를 가져옵니다.
반환값은 LatLng 객체로, getLat()와 getLng() 메서드를 사용해 위도와 경도를 얻을 수 있습니다.
map.getBounds():

현재 지도 화면의 경계 정보를 가져옵니다.
반환값은 LatLngBounds 객체이며, getSouthWest()와 getNorthEast() 메서드를 통해 경계의 남서쪽과 북동쪽 좌표를 얻을 수 있습니다.
출력 결과:

console.log를 통해 지도 중심 좌표와 경계 좌표를 출력합니다.
예를 들어, 남서쪽 좌표와 북동쪽 좌표는 지도 경계의 두 꼭짓점을 나타냅니다.

결과 예시
지도 중심 좌표: { lat: 33.450701, lng: 126.570667 }
지도 경계 좌표:
남서쪽: { lat: 33.445001, lng: 126.565000 }
북동쪽: { lat: 33.456401, lng: 126.576334 }



2. visibleMarkers 상태를 추가하여 지도의 현재 영역에 포함된 마커만 저장하고 렌더링합니다.

import { useEffect, useMemo, useState } from "react";
import { Map, MapMarker } from "react-kakao-maps-sdk";
import { useMapStore } from "../store";
import { storePositions } from "../storeData";
import { debounce } from "../useDebounce";

function MapMultiMarker() {
  const [mapState, setMapState] = useState({
    center: {
      lat: 33.450701,
      lng: 126.570667,
    },
    address: "",
    errMsg: "",
  });
  const [markerState, setMarkerState] = useState(mapState.center);
  const [isOpenStates, setIsOpenStates] = useState<Record<string, boolean>>(
    Object.fromEntries(storePositions.map((item) => [item.id, false]))
  );
  const [visibleMarkers, setVisibleMarkers] = useState(storePositions); // 현재 보이는 마커 상태

  const { saveState, isSaved, setSaveState, setIsSaved } = useMapStore();

  useEffect(() => {
    if (isSaved && saveState.center) {
      setMarkerState(saveState.center);
      setMapState((prev) => ({
        ...prev,
        center: saveState.center,
      }));
    } else {
      getCurrentAddress();
    }
  }, []);

  const getCurrentAddress = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const newCenter = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          setMapState((prev) => ({
            ...prev,
            center: newCenter,
          }));
          setMarkerState(newCenter);
        },
        (err) => {
          setMapState((prev) => ({ ...prev, errMsg: err.message }));
        }
      );
    } else {
      setMapState((prev) => ({
        ...prev,
        errMsg: "현재 위치를 찾을 수 없습니다.",
      }));
    }
  };

  const getAddressHandle = useMemo(
    () =>
      debounce((lat: number, lng: number) => {
        const geocoder = new window.kakao.maps.services.Geocoder();
        geocoder.coord2Address(lng, lat, (result: any, status: any) => {
          if (status === kakao.maps.services.Status.OK) {
            const address = result[0].address.address_name;
            setMapState((prev) => ({
              ...prev,
              address,
            }));
          } else {
            setMapState((prev) => ({
              ...prev,
              address: "주소를 찾을 수 없습니다.",
            }));
          }
        });
      }, 300),
    [isSaved]
  );

  // 지도 경계가 변경될 때 호출되는 함수
  const onBoundsChangeHandler = (map: any) => {
    const bounds = map.getBounds(); // 지도 경계값 가져오기

    // 지도 영역 내에 포함된 마커 필터링
    const filteredMarkers = storePositions.filter((position) => {
      const markerLatLng = new kakao.maps.LatLng(position.lat, position.lng);
      return bounds.contain(markerLatLng); // 경계 내 포함 여부 확인
    });

    setVisibleMarkers(filteredMarkers); // 보이는 마커만 업데이트
  };

  const getMarkerImage = (machineType: string) => {
    switch (machineType) {
      case "아이머신":
        return {
          src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGmkjuCUStRkZCr_t6i4sm1BVpvUfT8dPhMQ&s",
          size: { width: 32, height: 32 },
          options: { offset: { x: 16, y: 32 } },
        };
      case "케이머신":
        return {
          src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSC2ipsBLzm7rx3hFc3KHfZPw0AZFFpMH_Y7Q&s",
          size: { width: 32, height: 32 },
          options: { offset: { x: 16, y: 32 } },
        };
      default:
        return {
          src: "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png",
          size: { width: 32, height: 32 },
          options: { offset: { x: 16, y: 32 } },
        };
    }
  };

  return (
    <div className="map-wrap">
      <Map
        center={isSaved ? saveState.center : mapState.center}
        style={{
          maxWidth: "800px",
          width: "100%",
          height: "80vh",
        }}
        level={3}
        onBoundsChanged={(map) => onBoundsChangeHandler(map)} // 경계 변경 이벤트
      >
        {visibleMarkers.map((item) => {
          const lat = Number(item.lat);
          const lng = Number(item.lng);
          const markerImage = getMarkerImage(item.machine);

          return (
            <MapMarker
              key={item.id}
              position={{ lat, lng }}
              image={markerImage}
              clickable={true}
              onClick={() =>
                setIsOpenStates((prev) => ({
                  ...prev,
                  [item.id]: true,
                }))
              }
            >
              {isOpenStates[item.id] && (
                <div style={{ minWidth: "150px" }}>
                  <img
                    alt="close"
                    width="14"
                    height="13"
                    src="https://t1.daumcdn.net/localimg/localimages/07/mapjsapi/2x/bt_close.gif"
                    style={{
                      position: "absolute",
                      right: "5px",
                      top: "5px",
                      cursor: "pointer",
                    }}
                    onClick={() =>
                      setIsOpenStates((prev) => ({
                        ...prev,
                        [item.id]: false,
                      }))
                    }
                  />
                  <div style={{ padding: "5px", color: "#000" }}>
                    {item.storeName}
                  </div>
                </div>
              )}
            </MapMarker>
          );
        })}
      </Map>
    </div>
  );
}

export default MapMultiMarker;


onBoundsChanged:

지도 영역 변경 시 호출됩니다.
getBounds()로 지도 경계값을 가져와 storePositions의 각 마커가 포함되는지 확인합니다.
visibleMarkers:

현재 지도에 표시할 마커 목록을 상태로 관리하여, 불필요한 마커를 렌더링하지 않도록 합니다.
이제 지도 경계 내에 포함된 마커만 화면에 표시됩니다.